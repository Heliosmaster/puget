(ns puget.data
  "Code to handle custom data represented as tagged EDN values."
  (:require
    [clojure.data.codec.base64 :as b64])
  (:import
    (java.net URI)
    (java.util Date TimeZone UUID)))


;; ## Tagged-value Protocol

(defprotocol TaggedValue
  (edn-tag [this] "Return the EDN tag symbol for this data type.")
  (edn-value [this] "Return the EDN value to follow the tag."))


(defn edn-str
  "Converts the given TaggedValue data to a tagged EDN string."
  ^String
  [v]
  (str \# (edn-tag v) \space (pr-str (edn-value v))))



;; ## Extension Functions

(defmacro defprint-method
  "Defines a print-method for the given class which writes out the EDN
  serialization from `edn-str`."
  [t]
  `(defmethod print-method ~t
     [v# ^java.io.Writer w#]
     (.write w# (edn-str v#))))


(defmacro extend-tagged-value
  "Defines an EDN representation for a type `t`. The tag will be the symbol
  given for `tag` and the value will be generated by applying `expr` to the
  original value."
  [t tag expr]
  `(let [value-fn# ~expr]
     (extend-type ~t
       TaggedValue
       (edn-tag [this#] ~tag)
       (edn-value [this#]
         (value-fn# this#)))
     (defprint-method ~t)))


(defmacro extend-tagged-str
  "Defines an EDN representation for the given type by converting it to a
  string value."
  [t tag]
  `(extend-tagged-value ~t ~tag str))


(defmacro extend-tagged-map
  "Defines an EDN representation for the given type by converting it to a
  map value."
  [t tag]
  `(extend-tagged-value ~t ~tag
     (comp (partial into {}) seq)))



;; ## Basic EDN Types

(defn- format-utc
  "Produces an ISO-8601 formatted date-time string from the given Date."
  [^Date date]
  (->
    "yyyy-MM-dd'T'HH:mm:ss.SSS-00:00"
    java.text.SimpleDateFormat.
    (doto (.setTimeZone (TimeZone/getTimeZone "GMT")))
    (.format date)))


;; `inst` Date-time instant as an ISO-8601 string.
(extend-tagged-value Date 'inst format-utc)


;; `uuid` Universally-unique identifier string.
(extend-tagged-str UUID 'uuid)


;; `bin` Binary data in the form of byte arrays.
(extend-tagged-value
  (class (byte-array 0))
  'bin
  #(->> % b64/encode (map char) (apply str)))


(defn read-bin
  "Reads a base64-encoded string into a byte array."
  ^bytes
  [^String bin]
  (b64/decode (.getBytes bin)))


;; `uri` Universal Resource Identifier string.
(extend-tagged-str URI 'uri)


(defn read-uri
  "Constructs a URI from a string value."
  ^URI
  [^String uri]
  (URI. uri))


;; Default tag reader.
(defrecord GenericTaggedValue
  [tag value]

  TaggedValue
  (edn-tag [this] tag)
  (edn-value [this] value))


(defprint-method GenericTaggedValue)


(defn tagged-value
  "Creates a generic tagged value record to represent some EDN value. This is
  suitable for use as a default-data-reader function."
  [tag value]
  {:pre [(symbol? tag)]}
  (->GenericTaggedValue tag value))
